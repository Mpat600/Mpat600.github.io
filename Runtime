var init = function (window) {
  "use strict";

  var opspark = window.opspark,
    draw = opspark.draw,
    physikz = opspark.racket.physikz,
    world = opspark.world,
    data = "assets/spritesheet/halle/data-v9.json",
    app = opspark.makeApp(world.makeRules()),
    canvas = app.canvas,
    view = app.view,
    fps = draw.fps("#000");

  var space,
    rules,
    ground,
    spritesheet,
    halle,
    hud,
    orbManager,
    playerManager,
    particleManager;

  var debugHalleHitZones = false;

  space = app.space;
  (rules = app.rules),
    (particleManager = opspark.makeParticleManager(app.stage));
  ground = opspark.makeGround(app);

  var background = opspark.makeBackground(app, ground);
  view.addChild(background);

  var help = draw.textfield(
    "MOVES || up: jump | right: flying jump | down: duck | space: fire | q self destruct!",
    "20px Arial",
    "#ccc",
    "left"
  );
  help.x = 10;
  help.y = ground.y + ground.getBounds().height + 10;
  view.addChild(help);

  window.opspark.makeSpriteSheet(data).then(function (ss) {
    spritesheet = ss;
    halle = window.opspark.makeHalle(
      spritesheet,
      particleManager,
      debugHalleHitZones
    );
    halle.x = halle.getBounds().width * 2;
    halle.y = ground.y - halle.getBounds().height + 3;
    app.addUpdateable(halle);
    view.addChild(halle);

    playerManager = opspark.makePlayerManager(
      halle,
      app,
      opspark.makeProjectileManager(view, space, particleManager)
    );

    app.addUpdateable(playerManager);
    app.addUpdateable({ update: update });
  });

  view.addChild(fps);
  app.addUpdateable(fps);

  function update() {
    space.forEach(function (body) {
      physikz.updatePosition(body);
      physikz.updateSpace(space, physikz.hitTestRadial, rules.handleCollision);
      playerManager.hitTest(body);
    });
  }

  var hud = opspark.makeHud();
  view.addChild(hud);
  window.hud = hud;

  var game = opspark.createGameManager(app, hud);
  opspark.makeDataInGame(game);
  opspark.runLevelInGame(game);
};

// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
if (
  typeof process !== "undefined" &&
  typeof process.versions.node !== "undefined"
) {
  // here, export any references you need for tests //
  module.exports = init;
}
var makeLevelData = function (window) {
    window.opspark = window.opspark || {};
  
    window.opspark.makeDataInGame = function (game) {
      // some useful constants
      var groundY = game.groundY;
  
      // this data will allow us to define all of the
      // behavior of our game
  
      // TODO 12: change the below data
      var levelData = [
        {
          name: "Robot Romp",
          number: 1,
          speed: -3,
          gameItems: [
            { type: "sawblade", x: 400, y: groundY },
            { type: "sawblade", x: 600, y: groundY },
            { type: "sawblade", x: 900, y: groundY },
          ],
        },
        {
          name: "Robot Rampage",
          number: 2,
          speed: -3,
          gameItems: [
            { type: "sawblade", x: 400, y: groundY },
            { type: "sawblade", x: 600, y: groundY },
            { type: "sawblade", x: 900, y: groundY },
            { type: "reward", x: 300, y: groundY + 60},
          ],
        },
      ];
      window.opspark.levelData = levelData;
    };
  };
  
  var levelData = [
    {
      name: "Robot Romp",
      number: 1,
      speed: -3,
      gameItems: [
        { type: "sawblade", x: 400, y: groundY },
        { type: "sawblade", x: 600, y: groundY },
        { type: "sawblade", x: 900, y: groundY },
      ],
    },
    {
      name: "Robot Rampage",
      number: 2,
      speed: -3,
      gameItems: [
        { type: "sawblade", x: 400, y: groundY },
        { type: "sawblade", x: 600, y: groundY },
        { type: "sawblade", x: 900, y: groundY },
        { type: "reward", x: 300, y: groundY + 60},
      ],
    },
  ];
  
  window.opspark.levelData = levelData;
  
  
  // DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
  if (
    typeof process !== "undefined" &&
    typeof process.versions.node !== "undefined"
  ) {
    // here, export any references you need for tests //
    module.exports = makeLevelData;
  }
  var runLevels = function (window) {
    window.opspark = window.opspark || {};
  
    var draw = window.opspark.draw;
    var createjs = window.createjs;
    let currentLevel = 0;
  
    window.opspark.runLevelInGame = function (game) {
      // some useful constants
      var groundY = game.groundY;
  
      // this data will allow us to define all of the
      // behavior of our game
      var levelData = window.opspark.levelData;
  
      // set this to true or false depending on if you want to see hitzones
      game.setDebugMode(false);
  
      // TODOs 5 through 11 go here
      // BEGIN EDITING YOUR CODE HERE
   
      function createSawBlade(x, y) {
        var hitZoneSize = 25;
        var damageFromObstacle = 10;
        var sawBladeHitZone = game.createObstacle(hitZoneSize, damageFromObstacle);
        sawBladeHitZone.x = x;
        sawBladeHitZone.y = y;
        game.addGameItem(sawBladeHitZone);
        var obstacleImage = draw.bitmap("img/sawblade.png");
        sawBladeHitZone.addChild(obstacleImage);
        obstacleImage.x = -25
        obstacleImage.y = -25
      }
     createSawBlade(1000, 450)
     createSawBlade(800, 425)
     createSawBlade(600, 400)
  
   
    function createEnemy(x, y) {
      var enemy = game.createGameItem("enemy", 25);
      var redSquare = draw.rect(50, 50, "red");
      redSquare.x = -25;
      redSquare.y = -25;
      enemy.addChild(redSquare);
      enemy.x = x;
      enemy.y = groundY - y;
      game.addGameItem(enemy);
      enemy.velocityX = -4
      enemy.rotationalVelocity = 0.5
      enemy.onPlayerCollision = function () {
        game.changeIntegrity(-10)
      };
      enemy.onProjectileCollision = function () {
        game.increaseScore(100);
        enemy.fadeOut();
      };
    }
    createEnemy(1300, groundY );
    createEnemy(1100, groundY - 350);
    createEnemy(1200, groundY - 470 );
  
    function createreward (x,y) {
      var enemy = game.createGameItem("reward", 25);
      var redSquare = draw.rect(50, 50, "orange");
      redSquare.x = -25;
      redSquare.y = -25;
      enemy.addChild(redSquare);
      enemy.x = x;
      enemy.y = groundY - y;
      game.addGameItem(enemy);
      enemy.velocityX = -3
      enemy.rotationalVelocity = 0.5
      enemy.onPlayerCollision = function () {
        game.changeIntegrity(+10)
        enemy.fadeOut();
      };
      enemy.onProjectileCollision = function () {
        game.increaseScore(200);
        enemy.fadeOut();
      };
    };
  
    createreward(1200, groundY - 450);
    createreward(1300, groundY - 400);
    createreward(1400, groundY - 470);
  
    function createMarker (x,y) {
      var enemy = game.createGameItem("marker", 25);
      var redSquare = draw.rect(50, 50, "green");
      redSquare.x = -25;
      redSquare.y = -25;
      enemy.addChild(redSquare);
      enemy.x = x;
      enemy.y = groundY - y;
      game.addGameItem(enemy);
      enemy.velocityX = -2
      enemy.rotationalVelocity = 9.5
      enemy.onPlayerCollision = function () {
        game.changeIntegrity(+10)
        enemy.fadeOut();
      };
      enemy.onProjectileCollision = function () {
        game.increaseScore(200);
        enemy.fadeOut();
      };
    };
     
    createMarker(2000, groundY - 450)
   
  
      function startLevel() {
        // TODO 13 goes below here
  
  
  
        //////////////////////////////////////////////
        // DO NOT EDIT CODE BELOW HERE
        //////////////////////////////////////////////
        if (++currentLevel === levelData.length) {
          startLevel = () => {
            console.log("Congratulations!");
          };
        }
      }
      startLevel();
    };
  };
  
  // DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
  if (
    typeof process !== "undefined" &&
    typeof process.versions.node !== "undefined"
  ) {
    // here, export any references you need for tests //
    module.exports = runLevels;
  }
    